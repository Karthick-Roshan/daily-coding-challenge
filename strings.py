# group Anagram

from collections import defaultdict
def groupAnagrams(strs: list[str]) -> list[list[str]]:
    res = defaultdict(list)

    for s in strs:
        count = [0] * 26
        for c in s:
            count[ord(c) - 97] += 1  

        res[tuple(count)].append(s)

    return list(res.values())

# print(groupAnagrams(["act","pots","tops","cat","stop","hat"]))

def isIsomorphic(s: str, t: str) -> bool:
    if len(s) != len(t):
        return False

    map_s_t = {}
    map_t_s = {}

    for ch_s, ch_t in zip(s, t):
        if ch_s in map_s_t:
            if map_s_t[ch_s] != ch_t:
                return False
        else:
            map_s_t[ch_s] = ch_t

        if ch_t in map_t_s:
            if map_t_s[ch_t] != ch_s:
                return False
        else:
            map_t_s[ch_t] = ch_s

    return True

# print(isIsomorphic("egg", "add"))


# Implement Atoi
# Given a string s, the objective is to convert it into integer format without utilizing any built-in functions. 

# Cases for atoi() conversion:

# Skip any leading whitespaces.
# Check for a sign (‘+’ or ‘-‘), default to positive if no sign is present.
# Read the integer by ignoring leading zeros until a non-digit character is encountered or end of the string is reached. If no digits are present, return 0.
# If the integer is greater than 231 – 1, then return 231 – 1 and if the integer is smaller than -231, then return -231.

def myAtoi(s: str) -> int:
    n = len(s)
    sign = 1
    idx = 0
    res = 0
    
    while (idx < n) and s[idx] == " ":
        idx += 1
        
    if idx < n and (s[idx] == "-" or s[idx] == "+"):
        if s[idx] == "-":
            sign = -1
        idx += 1
    
    while idx < n and '0' <= s[idx] <= '9':
        
        res = 10 * res + (ord(s[idx]) - ord('0')) 
        
        if res > (2 ** 31 - 1):
            return sign * (2 ** 31 - 1) if sign == 1 else -2 ** 31
            
        idx += 1
        
    return sign * res

# print(myAtoi("42"))


# Given two non-empty strings s1 and s2, consisting only of lowercase English letters, 
# determine whether they are anagrams of each other or not. 
# Two strings are considered anagrams if they contain the same characters 
# with exactly the same frequencies, regardless of their order.

def areAnagrams(s1, s2):
    freq = [0] * 26
    
    for i in s1:
        freq[ord(i) - ord('a')] += 1
        
    for i in s2:
        freq[ord(i) - ord('a')] -= 1 
        
    for c in freq:
        if c != 0:
            return False
        
    return True

# print(areAnagrams("anagram", "nagaram"))


# You are given two strings s and t.
# String t is generated by random shuffling string s and then add one more letter at a random position.
# Return the letter that was added to t.

def findTheDifference(s, t):
    val = [0] * 26

    for char in s:
        val[ord(char) - ord('a')] += 1

    for char in t:
        val[ord(char) - ord('a')] -= 1

    for c in range(26):
        if val[c] != 0:
            return chr(c + ord('a'))

# print(findTheDifference("abcd", "abcde"))


# Given a string s, find the length of the longest substring without duplicate characters.

def lengthOfLongestSubstring(s):
    char_set = set()
    left = 0
    max_len = 0

    for right in range(len(s)):
        while s[right] in char_set:
            char_set.remove(s[left])
            left += 1
        char_set.add(s[right])
        max_len = max(max_len, right - left + 1)

    return max_len

# print(lengthOfLongestSubstring("abcabcbb"))


# Multiply Strings

def multiplyStrings(s1, s2):
    sign = '-' if (s1[0] == '-') ^ (s2[0] == '-') else ''
    s1, s2 = s1.lstrip('-0'), s2.lstrip('-0')
    
    if not s1 or not s2: 
        return "0"

    res = [0] * (len(s1) + len(s2))
    for i in range(len(s1)-1, -1, -1):
        for j in range(len(s2)-1, -1, -1):
            mul = (ord(s1[i]) - 48) * (ord(s2[j]) - 48)
            pos = i + j + 1
            res[pos] += mul
            res[pos-1] += res[pos] // 10
            res[pos] %= 10

    result = ''.join(map(str, res)).lstrip('0')
    return sign + (result if result else '0')

# print(multiplyStrings("123", "456"))


# 1957. Delete Characters to Make Fancy String
def makeFancyString(s: str) -> str:
    n = len(s)
    string = ''
    
    if n <= 2:
        return s
    else:
        string = s[0] + s[1]

        for i in range(2, n):
            if s[i] == string[-1] and s[i] == string[-2]:
                continue
            else:
                string += s[i]

    return string

# print(makeFancyString("leeetcode"))

# Is Subsequence
def isSubsequence(s: str, t: str) -> bool:
        i = 0  # pointer for s
        for char in t:
            if i < len(s) and s[i] == char:
                i += 1
        return i == len(s)

# print(isSubsequence("abc", "ahbgdc"))

# 2264. Largest 3-Same-Digit Number in String
def largestGoodInteger(num: str) -> str:
    max_good = ""

    for i in range(len(num) - 2):
        if num[i] == num[i+1] == num[i+2]:  
            sub = num[i:i+3]
            if sub > max_good:
                max_good = sub
                
    return max_good

# print(largestGoodInteger('6777133339'))


def wordPattern(pattern: str, s: str) -> bool:
    dic = {}
    s = s.split(" ")
    used = set()

    if len(pattern) != len(s):
        return False
    
    for i in range(len(pattern)):
        if pattern[i] not in dic:
            if s[i] in used:
                return False
            dic[pattern[i]] = s[i]
            used.add(s[i]) 
        else:
            if dic.get(pattern[i]) != s[i]:
                return False
 
    return True

# print(wordPattern(pattern = "abba", s = "dog dog dog dog"))


def countAndSay(n: int) -> str:
    if n == 1:
        return '1'

    def stol(string: str) -> list[list]:
        li = []
        length = len(string)
        idx = 0

        while idx < length:
            count, number = 0, string[idx]
            while idx < length and string[idx] == number:
                    count += 1
                    idx += 1
            li.append([count, number])

        return li

    def ltos(dl: list) -> str:
        string = ""
        for l in dl:
            string += str(l[0]) + l[1]
        return string

    res = ltos(stol('1'))
    if n == 2:
        return res

    for _ in range(2, n):
        res = ltos(stol(res))

    return res

# print(countAndSay(10))


# Excel Column
def titleToNumber(columnTitle: str) -> int:
    result = 0
    for char in columnTitle:
        value = ord(char) - ord('A') + 1  
        result = result * 26 + value      
    return result

# print(titleToNumber('ADCS'))

def convertToTitle(columnNumber: int) -> str:
    result = []
    while columnNumber > 0:
        columnNumber -= 1  
        result.append(chr(columnNumber % 26 + ord('A')))
        columnNumber //= 26
    return "".join(reversed(result))

# print(convertToTitle(703))